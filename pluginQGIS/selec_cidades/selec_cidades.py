# -*- coding: utf-8 -*-
"""
/***************************************************************************
 selec_cidades
                                 A QGIS plugin
 De acordo com um municipio, seleciona cidades a uma certa distancia
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-10-17
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Gabriele Camara
        email                : camaragabriele@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .selec_cidades_dialog import selec_cidadesDialog
import os.path
import psycopg2
from qgis.core import *
from qgis.utils import iface


class selec_cidades:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'selec_cidades_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Seleciona Cidades')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        
        # Adicao das camadas
        uri = QgsDataSourceUri()
        uri.setConnection("localhost", "5432", "pyqgis", "postgres", "postgres")
        uri.setDataSource("public", "mun_sirgas", "geom", "")
        layer1 = QgsVectorLayer(uri.uri(), "mun_sirgas", "postgres")
        # Adicionando layer ao prj
        QgsProject.instance().addMapLayer(layer1)
        # Atribuindo a simbologia
        symbol = QgsFillSymbol.createSimple({'border_width_map_unit_scale': '3x:0,0,0,0,0,0', 'color': '244,226,196,255', 'joinstyle': 'bevel', 'offset': '0,0', 'offset_map_unit_scale': '3x:0,0,0,0,0,0', 'offset_unit': 'MM', 'outline_color': '175,179,138,255', 'outline_style': 'solid', 'outline_width': '0.26', 'outline_width_unit': 'MM', 'style': 'solid'})
        layer1.renderer().setSymbol(symbol)
        # mostrar as mudancas
        layer1.triggerRepaint()
        iface.layerTreeView().refreshLayerSymbology(layer1.id())
        
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('selec_cidades', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/selec_cidades/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Seleciona cidades'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Seleciona Cidades'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = selec_cidadesDialog()

        # show the dialog
        self.dlg.show()
        # Limpando o combobox
        self.dlg.comboBox.clear()
        self.dlg.lineEdit.clear()
        # Adicionando a lista de municipios no combobox
        # Conexa com o banco de dados
        conn = psycopg2.connect("dbname = 'pyqgis' port = '5432'  user= 'postgres' password = 'postgres' host='localhost'")
        cursor = conn.cursor()
        cursor.execute("""SELECT nm_municip FROM mun_sirgas;""")
        mun = cursor.fetchall()
        conn.commit()
        cursor.close()
        conn.close()
        
        for i in mun:
            self.dlg.comboBox.addItem(i[0])
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            mun_selec = self.dlg.comboBox.currentText()
            dist = self.dlg.lineEdit.text()
            conn = psycopg2.connect("dbname = 'pyqgis' port = '5432'  user= 'postgres' password = 'postgres' host='localhost'")
            cursor = conn.cursor()
            cursor.execute("""CREATE OR REPLACE VIEW mun_selec AS SELECT * FROM mun_sirgas WHERE mun_sirgas.nm_municip='%s';""" %(mun_selec))
            conn.commit()
            cursor.execute("""CREATE OR REPLACE VIEW cidades_selec AS SELECT cidades_novo.* FROM cidades_novo, mun_selec WHERE ST_DWithin(cidades_novo.geom, mun_selec.geom, %s);""" %(dist))
            conn.commit()
            cursor.close()
            conn.close()
            # Adicionando a camada do municipio selecionado
            uri = QgsDataSourceUri()
            uri.setConnection("localhost", "5432", "pyqgis", "postgres", "postgres")
            uri.setDataSource("public", "mun_selec", "geom", "", "gid")
            layer2 = QgsVectorLayer(uri.uri(), "mun_selec", "postgres")
            QgsProject.instance().addMapLayer(layer2)
            # Atribuindo a simbologia
            symbol2 = QgsFillSymbol.createSimple({'border_width_map_unit_scale': '3x:0,0,0,0,0,0', 'color': '175,179,138,255', 'joinstyle': 'bevel', 'offset': '0,0', 'offset_map_unit_scale': '3x:0,0,0,0,0,0', 'offset_unit': 'MM', 'outline_color': '175,179,138,255', 'outline_style': 'solid', 'outline_width': '0.26', 'outline_width_unit': 'MM', 'style': 'solid'})
            layer2.renderer().setSymbol(symbol2)
            layer2.triggerRepaint()
            # Adicionando as cidades selecionadas
            uri.setDataSource("public", "cidades_selec", "geom", "", "gid")
            layer3 = QgsVectorLayer(uri.uri(), "cidades_selec", "postgres")
            QgsProject.instance().addMapLayer(layer3)
            iface.layerTreeView().refreshLayerSymbology(layer2.id())
            # Atribuindo a simbologia
            symbol3 = QgsMarkerSymbol.createSimple({'angle': '0', 'color': '255,35,1,255', 'horizontal_anchor_point': '1', 'joinstyle': 'bevel', 'name': 'circle', 'offset': '0,0', 'offset_map_unit_scale': '3x:0,0,0,0,0,0', 'offset_unit': 'MM', 'outline_color': '88,88,88,255', 'outline_style': 'solid', 'outline_width': '0', 'outline_width_map_unit_scale': '3x:0,0,0,0,0,0', 'outline_width_unit': 'MM', 'scale_method': 'diameter', 'size': '2', 'size_map_unit_scale': '3x:0,0,0,0,0,0', 'size_unit': 'MM', 'vertical_anchor_point': '1'})
            layer3.renderer().setSymbol(symbol3)
            layer3.triggerRepaint()
            iface.layerTreeView().refreshLayerSymbology(layer3.id())
            
            canvas = iface.mapCanvas() 
            canvas.setExtent(layer3.extent())
            layer3 = QgsProject.instance().mapLayersByName("cidades_selec")[0]
            layer3.setLabelsEnabled(True)
            layer3.triggerRepaint()
            pass
